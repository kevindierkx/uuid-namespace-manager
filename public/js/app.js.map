{"version":3,"sources":["errors.js","init.js","routes.js","constants/authEventConstants.js","controllers/uuid/createControllers.js","controllers/uuid/indexControllers.js","services/uuid/uuidResourceServices.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["'use_strict';\n\nangular.module('app.errors', [])\n\n.config([\n    '$httpProvider',\n    function ($httpProvider) {\n        $httpProvider.interceptors.push([\n            '$injector',\n            function ($injector) {\n                return $injector.get('AuthInterceptor');\n            }\n        ]);\n    }\n])\n\n.factory('AuthInterceptor', [\n    '$rootScope', '$q', 'AUTH_EVENTS',\n    function ($rootScope, $q, AUTH_EVENTS) {\n        return {\n            responseError: function (response) {\n                $rootScope.$broadcast({\n                    401: AUTH_EVENTS.notAuthenticated,\n                    403: AUTH_EVENTS.notAuthorized\n                }[response.status], response);\n\n                return $q.reject(response);\n            }\n        };\n    }\n]);\n","'use_strict';\n\nvar app = angular.module('app.init', [\n    // Core\n    'app.errors',\n    'app.routes',\n\n    // Constants\n    'app.authEventConstants',\n])\n\n.config([\n    '$locationProvider', '$httpProvider',\n    function ($locationProvider, $httpProvider) {\n        $locationProvider.html5Mode(true);\n\n        // Setting this header is required for Laravel/Symfony to accept our Ajax calls.\n        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n        $httpProvider.defaults.headers.common['Accept'] = 'application/vnd.uuid.v1+json';\n    }\n])\n\n.run([\n    '$rootScope', '$http',\n    function ($rootScope, $http) {\n        // For $http request we need to set the X-XSRF-TOKEN header\n        // to make sure we pass our CSRF protection.\n        $rootScope.xsrf_token = function (value) {\n            $http.defaults.headers.common['X-XSRF-TOKEN'] = value;\n        }\n\n        // Add the JwtToken to the session.\n        // $rootScope.jwt_token = function (value) {\n        //     $http.defaults.headers.common['Authorization'] = 'Bearer ' + value;\n        // }\n    }\n]);\n","'use_strict';\n\nangular.module('app.routes', [\n    'ui.router',\n\n    // Controllers\n    'uuid.indexControllers',\n    'uuid.createControllers',\n\n    // Services\n    'uuid.uuidResourceServices',\n])\n\n.config([\n    '$stateProvider', '$urlRouterProvider',\n    function ($stateProvider, $urlRouterProvider) {\n\n        $stateProvider\n        .state('uuid', {\n            abstract: true,\n            template: '<ui-view/>',\n            resolve: {\n                UuidResource: 'UuidResource',\n                uuids: [\n                    'UuidResource',\n                    function (UuidResource) {\n                        return UuidResource.query().$promise;\n                    }\n                ],\n            },\n        })\n        .state('uuid.index', {\n            url: '/',\n            templateUrl: 'api/ng-templates?template=uuid.index',\n            controller: 'IndexUuidController'\n        })\n        .state('uuid.create', {\n            url: '/create',\n            templateUrl: 'api/ng-templates?template=uuid.create',\n            controller: 'CreateUuidController'\n        });\n    }\n]);\n","'use_strict';\n\nangular.module('app.authEventConstants', [])\n\n.constant('AUTH_EVENTS', {\n    loginSuccess: 'auth-login-success',\n    loginFailed: 'auth-login-failed',\n    logoutSuccess: 'auth-logout-success',\n    sessionTimeout: 'auth-session-timeout',\n    notAuthenticated: 'auth-not-authenticated',\n    notAuthorized: 'auth-not-authorized'\n});\n","'use_strict';\n\nangular.module('uuid.createControllers', [\n    'ui.bootstrap.showErrors',\n\n    // Services\n    'uuid.uuidResourceServices',\n])\n\n.controller('CreateUuidController', [\n    '$scope', '$state', 'UuidResource', 'uuids',\n    function ($scope, $state, UuidResource, uuids) {\n        $scope.uuids = uuids;\n\n        $scope.create = function (uuid) {\n            $scope.$broadcast('show-errors-check-validity');\n\n            if ( $scope.createForm.$valid ) {\n                UuidResource.save(\n                    uuid,\n                    function (successResult) {\n                        $state.go('uuid.index', {}, { reload: true });\n                    },\n                    function (errorResult) {\n                        // Error state, we could implement something nice here.\n                    }\n                );\n            }\n        }\n    }\n]);\n","'use_strict';\n\nangular.module('uuid.indexControllers', ['ngTable'])\n\n.controller('IndexUuidController', [\n    '$scope', '$filter', 'ngTableParams', 'uuids',\n    function ($scope, $filter, ngTableParams, uuids) {\n        $scope.filterName = '';\n\n        $scope.tableParams = new ngTableParams({\n            sorting: {\n                name: 'asc'\n            },\n            filter: {\n                name: ''\n            }\n        }, {\n            counts: [],\n            filterDelay: 200,\n            getData: function ($defer, params) {\n                console.debug('execute');\n                var filteredData = params.filter() ?\n                    $filter('filter')(uuids.data, params.filter()) :\n                    uuids.data;\n\n                var orderedData = params.sorting() ?\n                    $filter('orderBy')(filteredData, params.orderBy()) :\n                    filteredData;\n\n                $defer.resolve(orderedData);\n            }\n        });\n\n        $scope.filterNameChanged = function () {\n            $scope.tableParams.filter()['name'] = $scope.filterName;\n        }\n    }\n]);\n","'use_strict';\n\nangular.module('uuid.uuidResourceServices', ['ngResource'])\n\n.factory(\"UuidResource\", [\n    '$resource',\n    function ($resource) {\n        return $resource(\n            \"/api/uuid\",\n            {},\n            {\n                'query': {method: 'GET', isArray: false}\n            }\n        );\n    }\n]);\n"],"sourceRoot":"/source/"}